<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on Rafael Leyva Ruiz</title><link>https://rafaelleru.github.io/blog/</link><description>Recent content in Blogs on Rafael Leyva Ruiz</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 14 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://rafaelleru.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Use custom python paths on neovim lsp client</title><link>https://rafaelleru.github.io/blog/custom-python-paths-nvim-lsp/</link><pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate><guid>https://rafaelleru.github.io/blog/custom-python-paths-nvim-lsp/</guid><description>Recently we started to use airflow in my current company, and I found an issue, LSP was not recognisin our custom plugins and DAGS inside of the airflow folder. This was caused because airflow is also a package that is installed in my virtualenv, so jedi was not able to discover definitions for example.
That was caused because in my PYTHONPATH airflow was a package, so jedi was not looking into the airflow folder for more source code, causing LSP functionality to not work fine.</description></item><item><title>Managing dotfiles with Ansible (II)</title><link>https://rafaelleru.github.io/blog/ansibleii/</link><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate><guid>https://rafaelleru.github.io/blog/ansibleii/</guid><description>Apart from linking my config files, I needed to build and install a bunch of programs in each new machine I set up, so I was using some bash scripts. I decided to use ansible for this task because it fits perfectly my needs to do this.
In this post, there are some examples of programs I am building manually with ansible, my reasons, and some thoughts.
1. Building my neovim copy → The neovim role By default ubuntu repositories have a very old neovim version (the last time I installed neovim from ubuntu LSP was not available, but it was ready in the master branch of the project).</description></item><item><title>Toggle vim QuickFix list, the right way</title><link>https://rafaelleru.github.io/blog/quickfix-autocomands/</link><pubDate>Sat, 26 Jun 2021 00:00:00 +0000</pubDate><guid>https://rafaelleru.github.io/blog/quickfix-autocomands/</guid><description>The Primeagean has a great video talking about all the great things you can get by using QuickFix lists and local QuickFix lists. After watching it I quickly grab the following code and paste it to my config.
let g:the_primeagen_qf_l = 0 let g:the_primeagen_qf_g = 0 fun! ToggleQFList(global) if a:global if g:the_primeagen_qf_g == 1 let g:the_primeagen_qf_g = 0 cclose else let g:the_primeagen_qf_g = 1 copen end else if g:the_primeagen_qf_l == 1 let g:the_primeagen_qf_l = 0 lclose else let g:the_primeagen_qf_l = 1 lopen end endif endfun This code will allow us to toggle both the LocalFix list and the QuickFix list by calling this function.</description></item><item><title>JSON magic with VIM</title><link>https://rafaelleru.github.io/blog/json-magic-vim/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://rafaelleru.github.io/blog/json-magic-vim/</guid><description>How to edit, compare, and pretty format JSONs only with VIM (and maybe some other CLI tool) I have been comparing multiple versions of the same JSON file in my daily workflow, having to edit it and converting it from one line to pretty and vice-versa. For that purpose, I was copying the JSON to a website called JSON formatter and validator (There are hundreds of sites with the same objective around in the internet) and then comparing it to his also prettified version using JSON diff.</description></item><item><title>Small-shell con eshell</title><link>https://rafaelleru.github.io/blog/small-shell/</link><pubDate>Mon, 15 May 2017 00:00:00 +0000</pubDate><guid>https://rafaelleru.github.io/blog/small-shell/</guid><description>Hace tiempo me encontré con una idea que me encanto, poder abrir rapidamente una ventana en emacs que contenga un emulador de terminal, para hacer tareas rapidas en ella. Lo ví en el archivo de configuración de @vterron, la función era small-shell y lucía tal que así:
(defun small-shell () (interactive) (split-window-vertically) (other-window 1) (shrink-window (- (window-height) 12)) (ansi-term)) Pero para mis necesidades se quedaba un poco corta, así que la modifiqué del siguiente modo.</description></item><item><title>Por qué todo el mundo debería probar un twm</title><link>https://rafaelleru.github.io/blog/tilingwm/</link><pubDate>Fri, 12 May 2017 00:00:00 +0000</pubDate><guid>https://rafaelleru.github.io/blog/tilingwm/</guid><description>Varias veces me habían propuesto usar alguno de los varios window manager que hay disponibles para linux. Tengo que decir que al principio no le veía sentido, ¿Por que usar algo que en apariencia es mucho mas feo que un entorno de escritorio clásico y que ademas tienes mucha menos funcionalidad por defecto?
En primer lugar, la funcionalidad como se entiende en un entorno de escritorio clásico como gnome o KDE no es aplicable a los twm.</description></item><item><title>Mantener una lista de articulos para leer con org-mode</title><link>https://rafaelleru.github.io/blog/to_read_list_emacs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rafaelleru.github.io/blog/to_read_list_emacs/</guid><description>Orgmode es le leche, no creo que pueda encontrar una frase mejor para empezar este post. Desde hace tiempo lo uso para mantener mi lista de TODOs, gestionar mi calendario, etc.
Aparte de lo comentado anteriormente mentengo tambien una lista de enlaces y articulos que leer, la almaceno en un archivo llamado to-read.org y hasta hace poco para abrirlo tenía que abrir emacs, abrir el archivo y empezar a navegar por los enlaces, pero hace unos días se me ocurrió una idea.</description></item><item><title>Seleccionando de una manera mas inteligente en emacs</title><link>https://rafaelleru.github.io/blog/expand-region-emacs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rafaelleru.github.io/blog/expand-region-emacs/</guid><description>El otro día viendo la serie de videos de Myke Zamansky sobre emacs, habló sobre un paquete de emacs llamado expand-region. El funcionamiento es muy sencillo nos permite seleccionar con una sola pulsación en el atajo que definamos el texto entre dos delimitadores, ya sean parentesis, comillas, etc.
Para usarlo lo primero es instalarlo, ejecutando en emacs M-x y escribiendo package-install RET expand-region RET donde RET es la tecla enter.</description></item></channel></rss>